import { packageOf, currentModulePath, patch, findFile } from '@tech_query/node-toolkit';

import { basename, resolve, join, extname } from 'path';

import {
    ensureDirSync, copy, readdirSync, readJSON, outputJSON, outputFile
} from 'fs-extra';

import Git from 'simple-git/promise';


/**
 * @type {Object}
 */
export  const creator_meta = packageOf( currentModulePath() );


/**
 * @param {String} path
 *
 * @return {String}
 */
export  function packageNameOf(path) {

    return  basename( resolve( path ) ).toLowerCase().replace(/[^@\w]+/g, '-');
}


/**
 * @param {String} path
 *
 * @return {SimpleGit}
 */
export  async function bootGit(path) {

    ensureDirSync( path );

    const git = Git( path );

    if (! (await git.checkIsRepo()))  await git.init();

    if (! (await git.getRemotes())[0]) {

        const package_name = packageNameOf( path ),
            userID = await git.raw(['config', '--get', 'user.name']);

        await git.addRemote(
            'origin', `https://github.com/${userID.trim()}/${package_name}.git`
        );
    }

    return git;
}


/**
 * @param {String}   template - Path relative from this package
 * @param {String}   dist     - Path relative from `process.cwd()`
 * @param {Function} [filter]
 */
export  async function copyFrom(template, dist, filter) {

    template = join(creator_meta.path, template);

    await copy(template,  dist,  {overwrite: false, filter});

    const setting = readdirSync( template )
        .filter(file  =>  extname(file) === '.json');

    for (let file of setting) {

        const source = join(template, file), target = join(dist, file);

        await outputJSON(
            target,  patch(await readJSON( target ),  await readJSON( source ))
        );
    }
}


/**
 * @param {String}    path - Project root
 * @param {SimpleGit} git  - Git repository instance of `path`
 */
export  async function setRoot(path, git) {

    await copyFrom('./template', path);

    if (! findFile(/ReadMe(\.(md|markdown))?/i, path))
        await outputFile(
            join(path, 'ReadMe.md'),
            `# ${packageNameOf( path )}

Web-site generated by [${creator_meta.meta.name}](${creator_meta.meta.homepage})`
        );

    const config = join(path, 'package.json');

    const meta = await readJSON( config );

    meta.author = (await git.raw(['config', '--get', 'user.email'])).trim();

    await outputJSON(config, meta);
}
